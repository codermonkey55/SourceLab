

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "QuickSnacks.Data\App.config"
//     Connection String Name: "QuickSnacksDb"
//     Connection String:      "Data Source=.\SQLEXPRESS;Initial Catalog=QuickSnacksDb;Persist Security Info=True;User ID=sa;password=**zapped**;;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace QuickSnacks.Data.EF.Generator
{
    // ************************************************************************
    // Unit of work
    public interface IQuickSnacksCtx : IDisposable
    {
        DbSet<Brochure> Brochures { get; set; }
        DbSet<FingerItem> FingerItems { get; set; }
        DbSet<Menu> Menus { get; set; }
        DbSet<MenuItem> MenuItems { get; set; }
        DbSet<Token> Tokens { get; set; }
        DbSet<User> Users { get; set; }

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
    }

    // ************************************************************************
    // Database context
    public partial class QuickSnacksCtx : DbContext, IQuickSnacksCtx
    {
        public DbSet<Brochure> Brochures { get; set; }
        public DbSet<FingerItem> FingerItems { get; set; }
        public DbSet<Menu> Menus { get; set; }
        public DbSet<MenuItem> MenuItems { get; set; }
        public DbSet<Token> Tokens { get; set; }
        public DbSet<User> Users { get; set; }
        
        static QuickSnacksCtx()
        {
            System.Data.Entity.Database.SetInitializer<QuickSnacksCtx>(null);
        }

        public QuickSnacksCtx()
            : base("Name=QuickSnacksDb")
        {
            InitializePartial();
        }

        public QuickSnacksCtx(string connectionString) : base(connectionString)
        {
            InitializePartial();
        }

        public QuickSnacksCtx(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BrochureConfiguration());
            modelBuilder.Configurations.Add(new FingerItemConfiguration());
            modelBuilder.Configurations.Add(new MenuConfiguration());
            modelBuilder.Configurations.Add(new MenuItemConfiguration());
            modelBuilder.Configurations.Add(new TokenConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BrochureConfiguration(schema));
            modelBuilder.Configurations.Add(new FingerItemConfiguration(schema));
            modelBuilder.Configurations.Add(new MenuConfiguration(schema));
            modelBuilder.Configurations.Add(new MenuItemConfiguration(schema));
            modelBuilder.Configurations.Add(new TokenConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(DbModelBuilder modelBuilder);
        
        // Stored Procedures
    }

    // ************************************************************************
    // POCO classes

    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.2.0")]
    public partial class Brochure
    {
        public int BrochureId { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime CreateDate { get; set; }
        public DateTime? EditDate { get; set; }

        public virtual ICollection<Menu> Menus { get; set; }
        
        public Brochure()
        {
            Menus = new HashSet<Menu>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.2.0")]
    public partial class FingerItem
    {
        public int FingerItemId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime CreateDate { get; set; }
        public DateTime? EditDate { get; set; }

        public virtual ICollection<MenuItem> MenuItems { get; set; }
        
        public FingerItem()
        {
            MenuItems = new HashSet<MenuItem>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.2.0")]
    public partial class Menu
    {
        public int MenuId { get; set; }
        public int BrochureId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime CreateDate { get; set; }
        public DateTime? EditDate { get; set; }

        public virtual ICollection<MenuItem> MenuItems { get; set; }

        public virtual Brochure Brochure { get; set; }
        
        public Menu()
        {
            MenuItems = new HashSet<MenuItem>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    public partial class MenuItem
    {
        public int MenuItemId { get; set; }
        public int MenuId { get; set; }
        public int FingerItemId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime CreateDate { get; set; }
        public DateTime? EditDate { get; set; }

        public virtual FingerItem FingerItem { get; set; }
        public virtual Menu Menu { get; set; }
        
        public MenuItem()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.2.0")]
    public partial class Token
    {
        public int TokenId { get; set; }
        public Guid AuthKey { get; set; }
        public Guid UserId { get; set; }
        public DateTime CreateDate { get; set; }
        public DateTime? EditDate { get; set; }

        public virtual ICollection<User> Users { get; set; }

        public virtual User User { get; set; }
        
        public Token()
        {
            Users = new HashSet<User>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.2.0")]
    public partial class User
    {
        public Guid UserId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string FullName { get; set; }
        public int? ActiveTokenId { get; set; }
        public DateTime CreateDate { get; set; }
        public DateTime? EditDate { get; set; }

        public virtual ICollection<Token> Tokens { get; set; }

        public virtual Token Token { get; set; }
        
        public User()
        {
            Tokens = new HashSet<Token>();
            InitializePartial();
        }

        partial void InitializePartial();
    }


    // ************************************************************************
    // POCO Configuration

    public partial class BrochureConfiguration : EntityTypeConfiguration<Brochure>
    {
        public BrochureConfiguration()
            : this("dbo")
        {
        }
 
        public BrochureConfiguration(string schema)
        {
            ToTable(schema + ".Brochure");
            HasKey(x => x.BrochureId);

            Property(x => x.BrochureId).HasColumnName("BrochureId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName("Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Description).HasColumnName("Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.CreateDate).HasColumnName("CreateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EditDate).HasColumnName("EditDate").IsOptional().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    public partial class FingerItemConfiguration : EntityTypeConfiguration<FingerItem>
    {
        public FingerItemConfiguration()
            : this("dbo")
        {
        }
 
        public FingerItemConfiguration(string schema)
        {
            ToTable(schema + ".FingerItem");
            HasKey(x => x.FingerItemId);

            Property(x => x.FingerItemId).HasColumnName("FingerItemId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Description).HasColumnName("Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.CreateDate).HasColumnName("CreateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EditDate).HasColumnName("EditDate").IsOptional().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    public partial class MenuConfiguration : EntityTypeConfiguration<Menu>
    {
        public MenuConfiguration()
            : this("dbo")
        {
        }
 
        public MenuConfiguration(string schema)
        {
            ToTable(schema + ".Menu");
            HasKey(x => x.MenuId);

            Property(x => x.MenuId).HasColumnName("MenuId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.BrochureId).HasColumnName("BrochureId").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Description).HasColumnName("Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.CreateDate).HasColumnName("CreateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EditDate).HasColumnName("EditDate").IsOptional().HasColumnType("datetime");

            HasRequired(a => a.Brochure).WithMany(b => b.Menus).HasForeignKey(c => c.BrochureId);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    public partial class MenuItemConfiguration : EntityTypeConfiguration<MenuItem>
    {
        public MenuItemConfiguration()
            : this("dbo")
        {
        }
 
        public MenuItemConfiguration(string schema)
        {
            ToTable(schema + ".MenuItem");
            HasKey(x => x.MenuItemId);

            Property(x => x.MenuItemId).HasColumnName("MenuItemId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.MenuId).HasColumnName("MenuId").IsRequired().HasColumnType("int");
            Property(x => x.FingerItemId).HasColumnName("FingerItemId").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Description).HasColumnName("Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.CreateDate).HasColumnName("CreateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EditDate).HasColumnName("EditDate").IsOptional().HasColumnType("datetime");

            HasRequired(a => a.FingerItem).WithMany(b => b.MenuItems).HasForeignKey(c => c.FingerItemId);
            HasRequired(a => a.Menu).WithMany(b => b.MenuItems).HasForeignKey(c => c.MenuId);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    public partial class TokenConfiguration : EntityTypeConfiguration<Token>
    {
        public TokenConfiguration()
            : this("dbo")
        {
        }
 
        public TokenConfiguration(string schema)
        {
            ToTable(schema + ".Token");
            HasKey(x => x.TokenId);

            Property(x => x.TokenId).HasColumnName("TokenId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AuthKey).HasColumnName("AuthKey").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.UserId).HasColumnName("UserId").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.CreateDate).HasColumnName("CreateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EditDate).HasColumnName("EditDate").IsOptional().HasColumnType("datetime");

            HasRequired(a => a.User).WithMany(b => b.Tokens).HasForeignKey(c => c.UserId);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    public partial class UserConfiguration : EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }
 
        public UserConfiguration(string schema)
        {
            ToTable(schema + ".User");
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName("UserId").IsRequired().HasColumnType("uniqueidentifier").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.FullName).HasColumnName("FullName").IsRequired().HasColumnType("nvarchar").HasMaxLength(101).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.ActiveTokenId).HasColumnName("ActiveTokenId").IsOptional().HasColumnType("int");
            Property(x => x.CreateDate).HasColumnName("CreateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EditDate).HasColumnName("EditDate").IsOptional().HasColumnType("datetime");

            HasOptional(a => a.Token).WithMany(b => b.Users).HasForeignKey(c => c.ActiveTokenId);
            InitializePartial();
        }
        partial void InitializePartial();
    }


    // ************************************************************************
    // Stored procedure return models

}
// </auto-generated>

